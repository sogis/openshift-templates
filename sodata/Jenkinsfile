def appName = env.JOB_BASE_NAME
def environment = params.NAMESPACE.substring(params.NAMESPACE.lastIndexOf('-') + 1)

pipeline {
    agent any
    parameters {
        choice(description: 'Namespace,in welchem die App deployt werden soll',
               choices: ['agi-apps-integration', 'agi-apps-production', 'agi-apps-test'],
               name: 'NAMESPACE'
               )
        booleanParam(defaultValue: false,
                     description: 'Nur Pods neu starten (keine Änderung an der DeploymentConfig vornehmen)',
                     name: 'RESTART_ONLY'
                     )
        booleanParam(defaultValue: false,
                     description: 'Nur Image deployen (keine datasearch.xml erstellen)',
                     name: 'IMAGE_ONLY'
                     )
        string(defaultValue: "master",
               description: 'Branch, der ausgecheckt werden soll',
               name: 'BRANCH'
               )
        string(defaultValue: "1.0.101",
               description: 'Version metafile Exporter',
               name: 'META2FILE_VERSION'
               )
        }

    stages {
        stage ('Checkout branch') {
            steps {
                checkout([
                     $class: 'GitSCM',
                     branches: [[name: "*/${params.BRANCH}"]],
                     extensions: [
                         [$class: 'CloneOption', noTags: true, shallow: true],
                         [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: appName]]]
                     ],
                     userRemoteConfigs: [[url: env.GIT_URL]]
                ])
             }
        }
        stage ('Prerequesits') {
            steps {
                script {
                    if ( environment == 'test' ) {
                        dbserver = env.DB_SERVER_TEST
                        ENV = 'test'
                        FTP_DIR = 'int'
                        }
                    else if ( environment == 'integration' ) {
                        dbserver = env.DB_SERVER_INT
                        ENV = 'int'
                        FTP_DIR = 'int'
                        }
                    else if ( environment == 'production' ) {
                        dbserver = env.DB_SERVER_PROD
                        ENV = 'prod'
                        FTP_DIR = 'prod'
                        }
                    else {
                        dbserver = env.DB_SERVER_TEST
                        ENV = 'test'
                        FTP_DIR = 'int'
                        }
                    credentials = [ 
                        usernamePassword(credentialsId: (env.NAMESPACE_JENKINS) + '-jenkins-dbuser-simi-secret'   , usernameVariable: 'DbUserSimi'     , passwordVariable: 'PwdSimi')
                        ]
                    }
                }
            }
        stage ('Restart the pods') {
            when { expression { params.RESTART_ONLY } }
            steps {
                sh """
                    oc rollout latest dc/${appName} -n ${params.NAMESPACE}
                """
             }
        }
        stage ('Apply configuration') {
            when { expression { !params.RESTART_ONLY } }
            steps {
                sh """
                    oc process -f ${appName}/${appName}.yaml --param-file=${appName}/${appName}_${environment}.params | oc apply -f - -n ${params.NAMESPACE}
                 """
            }
        }
        stage ('Create Datensuche XML File') {
            when { expression { !params.RESTART_ONLY && !params.IMAGE_ONLY } }
            steps {
                withCredentials ( credentials ) {
                    script {
                        sh """
                            if [ -d "meta_exporter" ]; then
                              rm -rf meta_exporter/* rm -rf meta_exporter/.git
                            fi
        
                            if [ ! -d  "config/default" ]; then
                              mkdir -p config/default
                            fi

                            # if not exists get the meta2file-cli-all.jar and set the necessary permissions
                            if [ ! -f "meta2file-cli-${META2FILE_VERSION}-all.jar" ]; then
                              wget https://github.com/sogis/meta2file/releases/download/v${META2FILE_VERSION}/meta2file-cli-${META2FILE_VERSION}-all.jar
                              chmod u+x meta2file-cli-${META2FILE_VERSION}-all.jar
                            fi
                            
                            # meta2file command to create the conf files
                            java -jar meta2file-cli-${META2FILE_VERSION}-all.jar -c jdbc:postgresql://${dbserver}/${env.SIMI_DB} -e ${ENV} -u ${DbUserSimi} -p ${PwdSimi} -d $env.WORKSPACE/sodata/datasearch.xml
                        """ 
                        }
                    }
                }
            }
          stage ('Upload XML to geocat') {
              when { expression { !params.RESTART_ONLY && !params.IMAGE_ONLY } }
              steps {
                  withCredentials ( credentials ) {
                      script {
                          sh """
                              if [ ! -d "config/default" ]; then
                                  mkdir -p config/default
                              fi
                              # meta2file command to create the conf files
                              java -jar meta2file-cli-${META2FILE_VERSION}-all.jar -c jdbc:postgresql://${dbserver}/${env.SIMI_DB} -e ${ENV} -u ${DbUserSimi} -p ${PwdSimi} -g $env.WORKSPACE/config
                              sftp -i /etc/ssh-keys/id_rsa $GEOCAT_SFTP_USER@$GEOCAT_SFTP_SERVER <<EOL
                              cd ${FTP_DIR}
                              rm ch.*
                              put config/*
                              quit
                              EOL
                          """
                          archiveArtifacts artifacts: 'config/**', onlyIfSuccessful: true, allowEmptyArchive: true
                          sh """
                              rm -rf $env.WORKSPACE/config
                          """
                          }
                      }
                  }
              }
          stage ('Upload XML to S3') {
              when { expression { !params.RESTART_ONLY && !params.IMAGE_ONLY } }
              steps {
                  withAWS(credentials:env.NAMESPACE_JENKINS + '-jenkins-sodata-aws-secret', region:'eu-central-1') {
                      s3Upload(file:env.WORKSPACE + '/sodata/datasearch.xml', bucket:'ch.so.agi.sodata-' + ENV, path:'datasearch.xml', acl:'PublicRead')
                      }
                  archiveArtifacts artifacts: 'sodata/datasearch.xml', onlyIfSuccessful: true, allowEmptyArchive: true
                  }
              }
          stage ( 'Wait for rollout to finish' ) {
              steps {
                  sh """
                      sleep 2 && oc rollout status -n ${params.NAMESPACE}  dc/${appName}
                  """
                  }
              }
        }
    post {
        unsuccessful {
            emailext (
                to: '${DEFAULT_RECIPIENTS}',
                subject: "sodata Pipeline ist fehlgeschlagen",
                body: "Die Ausführung der sodata Pipeline war nicht erfolgreich. Details dazu finden Sie in den Log-Meldungen unter ${RUN_DISPLAY_URL}."
            )
        }
        // Clean after build
        cleanup {
            script { currentBuild.description = "${params.NAMESPACE}, branch: ${params.BRANCH}" }   
            sh """
                rm -rf $WORKSPACE/sodata
            """
            }
        }
    }
