apiVersion: v1
kind: Template
metadata:
  name: seeder-cronjob-template
objects:
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: seeder
  spec:
    schedule: ${SCHEDULE}
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              parent: cronjob-seeder
          spec:
            containers:
            - name: seeder
              image: sogis/docker-mapcache
              command:
              - /bin/bash
              args:
              - "-c"
              - "mapcache_seed -c /mapcache/mapcache${ENVIRONMENT_NAME}.xml -t ch.so.agi.hintergrundkarte_sw -f -z ${ZOOM_LEVELS} -n 4 -d PG:'' -s \"SELECT ST_Union(geometrie) as geometrie FROM agi_mopublic_pub.mopublic_gemeindegrenze WHERE date_trunc('day', importdatum) = (SELECT max(date_trunc('day', importdatum)) FROM agi_mopublic_pub.mopublic_gemeindegrenze) GROUP BY date_trunc('day', importdatum)\" && mapcache_seed -c /mapcache/mapcache${ENVIRONMENT_NAME}.xml -t ch.so.agi.hintergrundkarte_farbig -f -z ${ZOOM_LEVELS} -n 4 -d PG:'' -s \"SELECT ST_Union(geometrie) as geometrie FROM agi_mopublic_pub.mopublic_gemeindegrenze WHERE date_trunc('day', importdatum) = (SELECT max(date_trunc('day', importdatum)) FROM agi_mopublic_pub.mopublic_gemeindegrenze) GROUP BY date_trunc('day', importdatum)\""
              env:
              - name: PGHOST
                value: ${PGHOST}
              - name: PGDATABASE
                value: ${PGDATABASE}
              - name: PGUSER
                value: ${PGUSER}
              - name: PGPASSWORD
                value: ${PGPASSWORD}
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              volumeMounts:
              - mountPath: /tiles
                name: mapcache-tiles 
            restartPolicy: Never
            volumes:
            - name: mapcache-tiles
              persistentVolumeClaim:
                claimName: ${PVC_NAME}
parameters:
- name: PVC_NAME
  description: Persistent Volume Claim to be added to the container
  displayName: Persistent Volume Claim name
  value: my-storage-claim
- name: ZOOM_LEVELS
  description: The zoom levels to be seeded by this job (e.g. 0,10)
  displayName: Zoom levels to seed
  value: 0,14
- name: SCHEDULE
  description: Schedule of the Cron Job in Cron format
  displayName: Schedule of Cron Job
  value: '00 04 * * *'
- name: ENVIRONMENT_NAME
  description: Name of the environment in which the container is running (e.g. test or production)
  displayName: Environment name
  value: ''
- name: PGHOST
  description: DB server hostname or IP
  displayName: DB server
- name: PGDATABASE
  description: DB name
  displayName: DB name
- name: PGUSER
  description: DB user to connect as
  displayName: DB user
- name: PGPASSWORD
  description: Password of the DB user
  displayName: DB password
- name: CPU_REQUEST
  description: "The minimum amount of CPU the container is guaranteed."
  value: 500m
- name: CPU_LIMIT
  description: "The maximum amount of CPU the container is allowed to use when running."
  value: "1"
- name: MEMORY_REQUEST
  description: "The minimum amount of memory the container is guaranteed."
  value: 175Mi
- name: MEMORY_LIMIT
  description: "The maximum amount of memory the container is allowed to use when running."
  value: 300Mi
