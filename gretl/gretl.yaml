apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: gretl-platform-template
labels:
  template: gretl-platform-template
  app: gretl-platform
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: jenkins-controller
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${IMAGENAME}:${TAG}
      importPolicy:
        scheduled: ${{IMPORT_POLICY_SCHEDULED}}
      name: ${TAG}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: configuration-as-code
    labels:
      app: gretl-platform
  data:
    configuration-as-code.yaml: |
      jenkins:
        scmCheckoutRetryCount: 1
      unclassified:
        location:
          adminAddress: ${JENKINS_ADMIN_EMAIL_ADDRESS}
      jobs:
        - script: |
            job('gretl-job-generator') {
              description('Generates a Jenkins job for every GRETL-Job found in the Git repository')
              logRotator(-1, 14)
              scm {
                git {
                  remote {
                    url('${GRETL_JOB_REPO_URL}')
                  }
                  branch('*/main')
                }
              }
              triggers {
                cron('H H/8 * * *')
              }
              steps {
                dsl {
                  external('gretl_job_generator.groovy')
                  removeAction('DELETE')
                }
              }
            }
        - script: |
            job('gretl-job-generator-oerebv2') {
              description('Generates a Jenkins job for every GRETL-Job found in the Git repository')
              logRotator(-1, 14)
              scm {
                git {
                  remote {
                    url('${GRETL_JOB_REPO_URL_OEREB_V2}')
                  }
                  branch('*/main')
                }
              }
              triggers {
                cron('H H/8 * * *')
              }
              steps {
                dsl {
                  external('gretl_job_generator.groovy')
                  removeAction('DELETE')
                }
              }
            }
        - script: |
            job('gretl-job-generator-schema') {
              description('Generates a Jenkins job for every GRETL-Job found in the Git repository')
              logRotator(-1, 14)
              scm {
                git {
                  remote {
                    url('${GRETL_JOB_REPO_URL_SCHEMA}')
                    credentials('${PROJECT_NAME}-github-access-token-schema-jobs')
                  }
                  branch('*/main')
                }
              }
              triggers {
                cron('H H/8 * * *')
              }
              steps {
                dsl {
                  external('gretl_job_generator.groovy')
                  removeAction('DELETE')
                }
              }
            }
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPNAME}
  spec:
    replicas: ${{REPLICA_COUNT}}
    revisionHistoryLimit: 6
    selector:
      app: ${APPNAME}
    strategy:
      type: Rolling
      rollingParams:
        timeoutSeconds: 180
    template:
      metadata:
        labels:
          app: ${APPNAME}
      spec:
        serviceAccountName: ${APPNAME}
        containers:
        - name: ${APPNAME}
          ## List the necessary envirionment variables below
          env:
          - name: OPENSHIFT_ENABLE_OAUTH
            value: ${ENABLE_OAUTH}
          - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
            value: 'true'
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: 'true'
          - name: INSTALL_PLUGINS
            value: ${INSTALL_PLUGINS}
          - name: OVERRIDE_PV_PLUGINS_WITH_IMAGE_PLUGINS
            value: ${OVERRIDE_PV_PLUGINS_WITH_IMAGE_PLUGINS}
          - name: CASC_JENKINS_CONFIG
            value: ${CASC_JENKINS_CONFIG}
          - name: JENKINS_SERVICE_NAME
            value: ${APPNAME}
          - name: JNLP_SERVICE_NAME
            value: ${APPNAME}-jnlp
          - name: CONTAINER_HEAP_PERCENT
            value: '0.75'
          - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
            value: 'true'
          - name: GRETL_JOB_REPO_URL
            value: ${GRETL_JOB_REPO_URL}
          - name: GRETL_JOB_REPO_URL_OEREB_V2
            value: ${GRETL_JOB_REPO_URL_OEREB_V2}
          - name: GRETL_JOB_REPO_URL_SCHEMA
            value: ${GRETL_JOB_REPO_URL_SCHEMA}
          ## Define HealthChecks. Ideally the timeoutSeconds for the readiness Probe should be shorter than for the liveness Probe or you have different Probes for the checks
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            timeoutSeconds: 240
          livenessProbe:
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 420
            periodSeconds: 360
            timeoutSeconds: 240
          ## Define the desired Resources for your container in the paramter file. They should be different in test, int and prod environment
          resources:
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
          ## Define the required volume mounts
          volumeMounts:
          - name: ${APPNAME}-data
            mountPath: /var/lib/jenkins
          - name: configuration-as-code-volume
            mountPath: /opt/configuration-as-code
            readOnly: true
          - name: gretl-jenkins-ca-certificates-volume
            mountPath: /etc/pki/ca-trust/source/anchors
            readOnly: true
        ## Define the required volumes
        volumes:
        - name: ${APPNAME}-data
          persistentVolumeClaim:
            claimName: ${JENKINS_PVC_NAME}
        - name: configuration-as-code-volume
          configMap:
            name: configuration-as-code
        - name: gretl-jenkins-ca-certificates-volume
          configMap:
            name: gretl-jenkins-ca-certificates
            optional: true
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APPNAME}
        from:
          kind: ImageStreamTag
          name: jenkins-controller:${TAG}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPNAME}
  spec:
    ## Define the ports exposed by the app
    ports:
    - name: web
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APPNAME}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPNAME}-jnlp
  spec:
    ## Define the ports exposed by the app
    ports:
    - name: agent
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      app: ${APPNAME}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${APPNAME}
  spec:
    host: ${HOSTNAME}
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    port:
      targetPort: web
    to:
      kind: Service
      name: ${APPNAME}
## The following objects are needed as pod templates for the Jenkins agents
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: jenkins-agent
  spec:
    lookupPolicy:
      local: true
    tags:
    - from:
        kind: DockerImage
        name: quay.io/openshift/origin-jenkins-agent-base:${JENKINS_AGENT_IMAGE_TAG}
      name: ${JENKINS_AGENT_IMAGE_TAG}
      importPolicy:
        scheduled: ${{JENKINS_AGENT_IMAGE_IMPORT_POLICY_SCHEDULED}}
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: gretl
  spec:
    lookupPolicy:
      local: true
    tags:
    - from:
        kind: DockerImage
        name: sogis/gretl:${GRETL_IMAGE_TAG}
      name: ${GRETL_IMAGE_TAG}
      importPolicy:
        scheduled: ${{GRETL_IMAGE_IMPORT_POLICY_SCHEDULED}}
    - from:
        kind: DockerImage
        name: sogis/gretl:${GRETL_ADDITIONAL_IMAGE_TAG}
      name: ${GRETL_ADDITIONAL_IMAGE_TAG}
      importPolicy:
        scheduled: ${{GRETL_ADDITIONAL_IMAGE_IMPORT_POLICY_SCHEDULED}}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: gretl-pod-template
    labels:
      app: gretl-platform
      role: jenkins-slave
  data:
    template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>gretl</name>
        <instanceCap>4</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>gretl</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <volumes>
          <org.csanchez.jenkins.plugins.kubernetes.volumes.SecretVolume>
            <mountPath>/home/gradle/.sshkeys</mountPath>
            <secretName>gretl-privatekeys</secretName>
            <optional>true</optional>
          </org.csanchez.jenkins.plugins.kubernetes.volumes.SecretVolume>
        </volumes>
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>jenkins-agent:${JENKINS_AGENT_IMAGE_TAG}</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/home/jenkins/agent</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>gretl</name>
            <image>gretl:${GRETL_IMAGE_TAG}</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/home/gradle/job</workingDir>
            <command>sleep</command>
            <args>24h</args>
            <ttyEnabled>false</ttyEnabled>
            <envVars>
              <org.csanchez.jenkins.plugins.kubernetes.model.KeyValueEnvVar>
                <key>GRADLE_OPTS</key>
                <value>-Xmx1024m</value>
              </org.csanchez.jenkins.plugins.kubernetes.model.KeyValueEnvVar>
            </envVars>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
        <nodeProperties/>
        <yaml>
      spec:
        containers:
        - name: jnlp
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: "1"
              memory: 512Mi
        - name: gretl
          resources:
            requests:
              cpu: 200m
              memory: 1Gi
            limits:
              cpu: "1"
              memory: 3.5Gi
          envFrom:
            - configMapRef:
                name: gretl-resources
          volumeMounts:
            - name: gretl-secrets-volume
              mountPath: /home/gradle/.gradle/gradle.properties
              subPath: gradle.properties
        volumes:
          - name: gretl-secrets-volume
            secret:
              secretName: gretl-secrets
        </yaml>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${GRETL_ADDITIONAL_POD_TEMPLATE_NAME}-pod-template
    labels:
      app: gretl-platform
      role: jenkins-slave
  data:
    template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>${GRETL_ADDITIONAL_POD_TEMPLATE_NAME}</name>
        <instanceCap>4</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>${GRETL_ADDITIONAL_POD_TEMPLATE_NAME}</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <volumes>
          <org.csanchez.jenkins.plugins.kubernetes.volumes.SecretVolume>
            <mountPath>/home/gradle/.sshkeys</mountPath>
            <secretName>gretl-privatekeys</secretName>
            <optional>true</optional>
          </org.csanchez.jenkins.plugins.kubernetes.volumes.SecretVolume>
        </volumes>
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>jenkins-agent:${JENKINS_AGENT_IMAGE_TAG}</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/home/jenkins/agent</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>gretl</name>
            <image>gretl:${GRETL_ADDITIONAL_IMAGE_TAG}</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/home/gradle/job</workingDir>
            <command>sleep</command>
            <args>24h</args>
            <ttyEnabled>false</ttyEnabled>
            <envVars>
              <org.csanchez.jenkins.plugins.kubernetes.model.KeyValueEnvVar>
                <key>GRADLE_OPTS</key>
                <value>-Xmx1024m</value>
              </org.csanchez.jenkins.plugins.kubernetes.model.KeyValueEnvVar>
            </envVars>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
        <nodeProperties/>
        <yaml>
      spec:
        containers:
        - name: jnlp
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: "1"
              memory: 512Mi
        - name: gretl
          resources:
            requests:
              cpu: 200m
              memory: 1Gi
            limits:
              cpu: "1"
              memory: 3.5Gi
          envFrom:
            - configMapRef:
                name: gretl-resources
          volumeMounts:
            - name: gretl-secrets-volume
              mountPath: /home/gradle/.gradle/gradle.properties
              subPath: gradle.properties
        volumes:
          - name: gretl-secrets-volume
            secret:
              secretName: gretl-secrets
        </yaml>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
parameters:
- name: APPNAME
  description: Name of the App
  required: true
- name: IMAGENAME
  description: Name of the docker image (e.g. sogis/my-image)
  required: true
- name: TAG
  description: The Docker image tag to use (e.g. latest)
  value: latest
- name: IMPORT_POLICY_SCHEDULED
  description: Regularly check for changed image?
  value: 'false'
- name: REPLICA_COUNT
  description: Number of replicas to run
  value: '1'
- name: CPU_REQUEST
  description: The minimum amount of CPU the container is guaranteed.
  required: true
- name: CPU_LIMIT
  description: The maximum amount of CPU the container is allowed to use when running.
  required: true
- name: MEMORY_REQUEST
  description: The minimum amount of memory the container is guaranteed.
  required: true
- name: MEMORY_LIMIT
  description: The maximum amount of memory the container is allowed to use when running.
  required: true
- name: HOSTNAME
  description: The hostname for the route
- name: ENABLE_OAUTH
  displayName: Enable OAuth in Jenkins
  description: Whether to enable OAuth OpenShift integration. If false, the static
    account 'admin' will be initialized with the password 'password'.
  value: 'true'
- name: INSTALL_PLUGINS
  displayName: Jenkins plug-ins to install
  description: List of Jenkins plug-ins to update to a specific version
    or to install additionally
  value:
    cloudbees-bitbucket-branch-source:886.v44cf5e4ecec5,
    cloudbees-disk-usage-simple:203.v3f46a_7462b_1a_,
    git-server:126.v0d945d8d2b_39,
    htmlpublisher:1.34,
    matrix-project:822.824.v14451b_c0fd42,
    script-security:1341.va_2819b_414686,
    active-directory:2.35,
    envinject:2.908.v66a_774b_31d93,
    envinject-api:1.199.v3ce31253ed13,
    file-parameters:339.v4b_cc83e11455
- name: OVERRIDE_PV_PLUGINS_WITH_IMAGE_PLUGINS
  displayName: Copy plugins of the image to persistent volume
  description: Overwrite the plugins installed in the jenkins persistent volume with the plugins installed in the Jenkins image.
  value: 'true'
- name: CASC_JENKINS_CONFIG
  displayName: Path or URL to Configuration as Code config file(s)
  description: Path or URL to the config file(s) for the Jenkins Configuration as Code plugin.
  value: /opt/configuration-as-code
- name: JENKINS_ADMIN_EMAIL_ADDRESS
  displayName: Jenkins administrator e-mail address
  description: E-mail address that appears in the FROM header in e-mails sent by Jenkins
  value: noreply@localhost
- name: JENKINS_PVC_NAME
  description: Name of the PVC for storing the Jenkins config and the jobs
  required: true
- name: GRETL_JOB_REPO_URL
  displayName: Git repo containing GRETL Jobs
  description: URL of the Git repo holding the GRETL Job configurations.
  value: https://github.com/sogis/gretljobs.git
- name: GRETL_JOB_REPO_URL_OEREB_V2
  displayName: Git repo containing OEREB V2 GRETL Jobs
  description: URL of the Git repo holding the OEREB V2 GRETL Job configurations.
  value: https://github.com/sogis/oereb-gretljobs.git
- name: GRETL_JOB_REPO_URL_SCHEMA
  displayName: Git repo containing Schema Jobs
  description: URL of the Git repo holding the Schema Job configurations.
  value: https://github.com/sogis/schema-jobs.git
- name: JENKINS_AGENT_IMAGE_TAG
  description: Jenkins agent image tag to be pulled from Quay.io
  required: true
- name: JENKINS_AGENT_IMAGE_IMPORT_POLICY_SCHEDULED
  description: Regularly check for changed Jenkins agent image; set to 'true' as it seems that Quay.io immediately deletes any image that has no more tag
  value: 'true'
- name: GRETL_IMAGE_TAG
  description: GRETL image tag to be pulled from Docker Hub
  required: true
- name: GRETL_IMAGE_IMPORT_POLICY_SCHEDULED
  description: Regularly check for changed GRETL image
  value: 'false'
- name: GRETL_ADDITIONAL_IMAGE_TAG
  description: GRETL image tag to be pulled from Docker Hub (for providing an additional GRETL version)
  required: true
- name: GRETL_ADDITIONAL_IMAGE_IMPORT_POLICY_SCHEDULED
  description: Regularly check for changed image (for additional GRETL version)
  value: 'false'
- name: GRETL_ADDITIONAL_POD_TEMPLATE_NAME
  description: Name for the pod template providing the additional GRETL version
  required: true
- name: TMP_PVC_NAME
  description: Name of the PVC used for temporary file storage (for gretl-bigtmp pod template only)
  required: true
